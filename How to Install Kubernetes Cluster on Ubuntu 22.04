Lab Setup
Master Node:  18.212.73.5 – 172.31.90.238 - k8smaster.indusnet.net
Worker Node1: 44.203.1.3  – 172.31.92.60  - k8sworker1.indusnet.net
Worker Node2:3.82.105.236 – 172.31.95.11  - k8sworker2.indusnet.net

Step -1 (Add the following entries in master and nodes)
nano /etc/hosts
18.212.73.5 k8smaster.indusnet.net k8smaster
44.203.1.3  k8sworker1.indusnet.net k8sworker1
3.82.105.236 k8sworker2.indusnet.net k8sworker2
ctrl+x
y
Step -2 Disable swap (Add the following entries in master and nodes)
sudo swapoff -a
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

Step -3 Add kernel setting (master and nodes)
tee /etc/modules-load.d/containerd.conf <<EOF
overlay
br_netfilter
EOF

modprobe overlay
modprobe br_netfilter

tee /etc/sysctl.d/kubernetes.conf <<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF

sysctl --system

Step -4 Install containerd run time (master and node)
#using containerd run time for our Kubernetes cluster. So, to install containerd, first install its dependencies.

apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates
Enable docker repository

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/docker.gpg
add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

#run following apt command to install containerd
apt update
apt install -y containerd.io

#Configure containerd so that it starts using systemd as cgroup.
containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1
sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml

#Restart and enable containerd service
systemctl restart containerd
systemctl enable containerd

Step -5 Add apt repository for Kubernetes (master and nodes)
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"

Step -6 Install Kubernetes components Kubectl, kubeadm & kubelet (Master and Nodes)
apt update
apt install -y kubelet kubeadm kubectl
apt-mark hold kubelet kubeadm kubectl

Step -7  Initialize Kubernetes cluster with Kubeadm command (In Master Only)
kubeadm init --control-plane-endpoint=k8smaster.indusnet.net
# Copy the following command separately to add in Worker Nodes

kubeadm join k8smaster.indusnet.net:6443 --token 5d06ps.vq35hhwo4murk3ut \
        --discovery-token-ca-cert-hash sha256:b9a808cd5eb49c1dab9c8b7b5a3a80e9057cedf26df3c542073dccf79fe76c53

mkdir -p $HOME/.kube
cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
chown $(id -u):$(id -g) $HOME/.kube/config

kubectl cluster-info
kubectl get nodes

Step -8 Add the cluster token in Worker nodes (Worker Nodes only)
kubeadm join k8smaster.indusnet.net:6443 --token 5d06ps.vq35hhwo4murk3ut \
        --discovery-token-ca-cert-hash sha256:b9a808cd5eb49c1dab9c8b7b5a3a80e9057cedf26df3c542073dccf79fe76c53

# As we can see nodes status is ‘NotReady’, so to make it active. We must install CNI (Container Network Interface) or network add-on plugins like Calico, Flannel and Weave-net.

Step -9 Install Calico Pod Network Add-on (In Master Only)
Run following curl and kubectl command to install Calico network plugin from the master node,

curl https://projectcalico.docs.tigera.io/manifests/calico.yaml -O
kubectl apply -f calico.yaml 

Step -10 Test Kubernetes Installation (Only In Master)
kubectl create deployment nginx-app --image=nginx --replicas=2
kubectl get deployment nginx-app
kubectl expose deployment nginx-app --type=NodePort --port=80
kubectl get svc nginx-app
kubectl describe svc nginx-app
#copy NodePort value which will be used for port Number
curl http://44.203.1.3:31222
#In Browser
http://44.203.1.3:31222/
